/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import com.jtattoo.plaf.aluminium.AluminiumLookAndFeel;
import common.DbConnector;
import dao.EmployeeDAO;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;
import vo.Employee;

/**
 *
 * @author Malith
 */
public class EmployeeView extends javax.swing.JDialog {
    EmployeeDAO employeeDAO;
    Connection myConn;
    /**
     * Creates new form EmployeeView2
     */
    public EmployeeView(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        //make them transparent
        jScrollPane1.getViewport().setOpaque(false);
        jScrollPane2.getViewport().setOpaque(false);
        
        //ImageIcon img = new ImageIcon(this.getClass().getResource("/pics/team2.png"));
        //this.setIconImage(img.getImage());
        
        try {
           
            this.myConn =  DbConnector.getInstance().getMyConn();
            // make a DAO for Employee class by sending in the DB Connection from dbConnector
            employeeDAO = new EmployeeDAO(myConn);

        } catch (IOException | SQLException ex) {
            JOptionPane.showMessageDialog(EmployeeView.this, "Error: " + ex, "Error", JOptionPane.ERROR_MESSAGE);
        }
        btnSearch.doClick();
        refreshQuicViewPanelDefault();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        btnNewContact = new javax.swing.JButton();
        btnUpdateContact = new javax.swing.JButton();
        btnDeleteContact = new javax.swing.JButton();
        comboPara = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtQuickPane = new javax.swing.JEditorPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Employees - Environmental Monitoring System 2016");

        jScrollPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jScrollPane1.setOpaque(false);

        table.setAutoCreateRowSorter(true);
        table.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Employee ID", "First Name", "Last Name"
            }
        ));
        table.setOpaque(false);
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tableMousePressed(evt);
            }
        });
        table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jLabel1.setText("Search Employee by");

        btnNewContact.setText("Add New Employee");
        btnNewContact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewContactActionPerformed(evt);
            }
        });

        btnUpdateContact.setText("Update Employee");
        btnUpdateContact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateContactActionPerformed(evt);
            }
        });

        btnDeleteContact.setText("Delete Employee");
        btnDeleteContact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteContactActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnNewContact, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnUpdateContact, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDeleteContact, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNewContact)
                    .addComponent(btnUpdateContact)
                    .addComponent(btnDeleteContact))
                .addContainerGap())
        );

        comboPara.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Name", "NIC", "phone", "All" }));

        jScrollPane2.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jScrollPane2.setOpaque(false);

        txtQuickPane.setEditable(false);
        txtQuickPane.setBorder(null);
        txtQuickPane.setContentType("text/html"); // NOI18N
        txtQuickPane.setToolTipText("");
        txtQuickPane.setOpaque(false);
        jScrollPane2.setViewportView(txtQuickPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(comboPara, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(5, 5, 5))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 387, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSearch)
                            .addComponent(comboPara, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMousePressed
        refreshQuicViewPanel();

    }//GEN-LAST:event_tableMousePressed

    private void tableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableKeyReleased
        refreshQuicViewPanel();
    }//GEN-LAST:event_tableKeyReleased

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed

        try {
            // Get keyWord to search from the text field
            String keyWord = txtSearch.getText();
            // get what to search from combo box
            String searchPara = comboPara.getSelectedItem().toString();

            List<Employee> employee = null;

            // Call DAO and get employees relevent to the "searchpara"
            if (keyWord != null && keyWord.trim().length() > 0) {
                employee = employeeDAO.searchEmployee(keyWord, searchPara);
            } else {
                // If last name is empty, then get all employees
                employee = employeeDAO.getAllEmployee();
            }

            // when there is no search results to show, clear the table
            if (employee.isEmpty()) {
                String[] columnNames = {"Last Name", "First Name", "NIC", "Account No"};
                DefaultTableModel model = new DefaultTableModel(columnNames, 0);
                table.setModel(model);
                // new update*****************************************************************************************************by Malith
                String temp = "<html><font  size=\"4\" color=\"red\"><center>No records!</center></font>";
                if (keyWord != null & !"".equals(keyWord)) {
                    temp = "<html><font  size=\"4\" color=\"red\"><center>No records for \"" + keyWord + "\" under \"" + searchPara + "\"</center></font>";
                }
                txtQuickPane.setText(temp);
                return;
            }

            // create the model and update the "table"
            EmployeeTableModel model = new EmployeeTableModel(employee);
            table.setModel(model);
            refreshQuicViewPanelDefault();

        } catch (Exception exc) {
            Logger.getLogger(EmployeeView.class.getName()).log(Level.SEVERE, null, exc);
            JOptionPane.showMessageDialog(EmployeeView.this, "Error: " + exc, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnNewContactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewContactActionPerformed
            new AddNewEmployee(null, rootPaneCheckingEnabled, this).setVisible(true);
    }//GEN-LAST:event_btnNewContactActionPerformed

    private void btnUpdateContactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateContactActionPerformed
        // get the selected row
        int row = table.getSelectedRow();

        //make sure a row is selected
        if (row < 0) {
            JOptionPane.showMessageDialog(EmployeeView.this, "You must select a employee first!", "Selection Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        // get the selected current Employee
        Employee tempEmployee = (Employee) table.getValueAt(row, EmployeeTableModel.OBJECT_COL);

        // open the update dialog box (same as add new employee)
        /*  try {
            //create dialog
            AddNewEmployee dialog = new AddNewEmployee(this, rootPaneCheckingEnabled, employeeDAO, tempEmployee, true, EmployeeView.this, myConn);
            // show dialog
            dialog.setVisible(true);
        } catch (IOException | SQLException ex) {
            Logger.getLogger(EmployeeView.class.getName()).log(Level.SEVERE, null, ex);
        }*/
    }//GEN-LAST:event_btnUpdateContactActionPerformed

    private void btnDeleteContactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteContactActionPerformed
        try {
            //get selected row
            int row = table.getSelectedRow();

            //make sure a row is selected
            if (row < 0) {
                JOptionPane.showMessageDialog(rootPane, "You must select a employee", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            //get confirmation from the user before deleting
            int response = JOptionPane.showConfirmDialog(rootPane, "This will delete this Employee!!!", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (response != JOptionPane.YES_OPTION) {
                return;
            }
            // get the current Employee
            Employee tempEmployee = (Employee) table.getValueAt(row, EmployeeTableModel.OBJECT_COL);

            // delete the employee
            employeeDAO.deleteEmployee(tempEmployee.getEmp_id());

            // refresh GUI
            refreshGUI();

            // show success message
            JOptionPane.showMessageDialog(EmployeeView.this, "Employee deleted successfully", "Employee deleted", JOptionPane.INFORMATION_MESSAGE);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(EmployeeView.this, "Error deleting the employee" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);

        }
        
        
    }//GEN-LAST:event_btnDeleteContactActionPerformed

     /**
     * method will refresh the GUI showing the latest update on the table
     *
     */
    public void refreshGUI() {
        try {
            // get all employee theough the DAO to a tempory List
            List employeeList = employeeDAO.getAllEmployee();

            // create the model and update the "table"
            EmployeeTableModel model = new EmployeeTableModel(employeeList);
            table.setModel(model);

        } catch (Exception exc) {
            JOptionPane.showMessageDialog(EmployeeView.this, "Error: " + exc, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public void refreshQuicViewPanelDefault() {
        // get the selected row
        int row = 0;
        // get the current Employee
        Employee tempEmployee = null;
        try {
            tempEmployee = (Employee) table.getValueAt(row, EmployeeTableModel.OBJECT_COL);
            // get values
            txtQuickPane.setText(tempEmployee.getSummary());
        } catch (Exception e) {
            txtQuickPane.setText("<html><font  size=\"4\" color=\"red\"><center>No  records!</center></font>");
        }

    }
    
     public void refreshQuicViewPanel() {
        // get the selected row
        int row = table.getSelectedRow();
        // get the current Employee
        Employee tempEmployee = null;
        tempEmployee = (Employee) table.getValueAt(row, EmployeeTableModel.OBJECT_COL);
        // get values
        txtQuickPane.setText(tempEmployee.getSummary());

    }

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        try {
             UIManager.setLookAndFeel(new AluminiumLookAndFeel());
            } 
        catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(EmployeeView.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                EmployeeView dialog = new EmployeeView(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeleteContact;
    private javax.swing.JButton btnNewContact;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdateContact;
    private javax.swing.JComboBox comboPara;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable table;
    private javax.swing.JEditorPane txtQuickPane;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
